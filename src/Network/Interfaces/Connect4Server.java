package connect4;

public interface Connect4Server {

	/**
	 * Response to a valid HELLO command from a client
	 * 
	 * @param assignedUserID this is the unique identifier the server assigned to the client who receives this WELCOME command.
	 * @param allowedThinkTime the time the client has to send a valid response to the server in milliseconds.
	 * If the client does not respond in time the server will decide what to do next (this depends on the implementing server).
	 * Note that the allowed think time can be dependent on whether the client is playing with an AI or as a human, which was reported in
	 * the preceding HELLO command.
	 * @param capabilities represents a vector with flags for the capabilities that are implemented in the server. See also the specification
	 * for cmdHello(...) in Connect4Client.java.
	 */
	public void cmdWelcome(int assignedUserID, long allowedThinkTime, int capabilities);
	
	/**
	 * Signal the client that a new game is started (i.e. an opponent has been found). All game settings including the id and username of the opponent
	 * are send along with this
	 * @param nameOtherPlayer username chosen by the opponent
	 * @param otherPlayerID id assigned to the opponent
	 * @param playFieldX the x dimension of the playing field
	 * @param playFieldY the y dimension of the playing field
	 * @param playFieldZ the z dimension of the playing field, in other words the height
	 * @param playerWhoHasNextTurnID the ID of the player who has the first turn and who should send his move to the server
	 * @param sequenceLengthOfWin the number of chips that make up a winning sequence
	 */
	public void cmdGame(String nameOtherPlayer, int otherPlayerID, int playFieldX, int playFieldY, int playFieldZ, int playerWhoHasNextTurnID, int sequenceLengthOfWin);
	
	/**
	 * Tell the client that a valid move has been submitted to the server. This could either be the move the receiving client has made himself,
	 * but it could also be the move of the opponent.
	 * @param moveX the x coordinate where a chip should be placed on top
	 * @param moveY the y coordinate where a chip should be placed on top
	 * @param actorID the ID of the player who made the move
	 * @param playerWhoHasNextTurnID the ID 
	 */
	public void cmdMoveSuccess(int moveX, int moveY, int actorID, int playerWhoHasNextTurnID);
	
	/**
	 * Tell the client the game has ended and reports the winner or a draw.
	 * @param winnerID the ID of the player who has won. <code>-1</code> means it's a draw
	 */
	public void cmdGameEnd(int winnerID);
	
	/**
	 * Tell the client his last command was either not recognized by the server or was an invalid action.
	 * @param theIllegalCommandWithParameters The received illegal command along with its parameters
	 */
	public void cmdReportIllegal(String theIllegalCommandWithParameters);
	
	/**
	 * Tell the client that a player has left.
	 * @param leftPlayerID the ID of the player who has left
	 * @param reason a message generated by the server stating the reason why the player left (e.g. kicked)
	 */
	public void cmdPlayerLeft(int leftPlayerID, String reason);
}
